<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\Order;
use App\Models\Listing;
use App\Models\User;

class OrderController extends Controller
{
    /**
     * Ng∆∞·ªùi mua b·∫•m "Mua ngay" ‚Üí t·∫°o ƒë∆°n h√†ng m·ªõi
     */
    public function store(Request $request)
    {
        $request->validate([
            'listing_id' => 'required|exists:listings,id',
        ]);

        $buyer = $request->user();
        $listing = Listing::findOrFail($request->listing_id);

        // Ng∆∞·ªùi b√°n l√† ch·ªß c·ªßa listing
        $seller = User::find($listing->seller_id);

        // T·∫°o ƒë∆°n h√†ng
        $order = Order::create([
            'order_number' => 'ORD' . time() . rand(1000, 9999),
            'buyer_id' => $buyer->id,
            'seller_id' => $seller->id,
            'listing_id' => $listing->id,
            'product_title' => $listing->title,
            'product_price' => $listing->price,
            'quantity' => 1,
            'total_amount' => $listing->price,
            'currency' => 'VND',
            'status' => 'pending',
        ]);

        return response()->json([
            'message' => 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!',
            'order' => $order
        ]);
    }

    /**
     * Ng∆∞·ªùi b√°n x√°c nh·∫≠n ƒë∆°n h√†ng
     */
    public function confirm($id)
    {
        $order = Order::findOrFail($id);

        // Ch·ªâ ng∆∞·ªùi b√°n m·ªõi ƒë∆∞·ª£c x√°c nh·∫≠n
        $seller = auth()->user();
        if ($seller->id !== $order->seller_id) {
            return response()->json(['message' => 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√°c nh·∫≠n ƒë∆°n n√†y!'], 403);
        }

        $order->update([
            'status' => 'confirmed',
            'confirmed_at' => now(),
        ]);

        return response()->json([
            'message' => 'Ng∆∞·ªùi b√°n ƒë√£ x√°c nh·∫≠n ƒë∆°n h√†ng!',
            'order' => $order
        ]);
    }

    /**
     * Ng∆∞·ªùi mua xem danh s√°ch ƒë∆°n c·ªßa m√¨nh
     */
    public function myOrders(Request $request)
    {
        $user = $request->user();

        $buyerOrders = \App\Models\Order::where('buyer_id', $user->id)
            ->orderBy('created_at', 'desc')
            ->get();

        $sellerOrders = \App\Models\Order::where('seller_id', $user->id)
            ->orderBy('created_at', 'desc')
            ->get();

        return response()->json([
            'buyer_orders' => $buyerOrders,
            'seller_orders' => $sellerOrders,
        ]);
    }

    /**
     * Ng∆∞·ªùi b√°n xem c√°c ƒë∆°n c·∫ßn x√°c nh·∫≠n
     */
    public function receivedOrders()
    {
        $orders = Order::where('seller_id', auth()->id())->latest()->get();
        return response()->json($orders);
    }

    public function show($id)
    {
        $order = \App\Models\Order::with(['seller:id,name,email,phone', 'buyer:id,name,email'])
            ->findOrFail($id);
        return response()->json($order);
    }
    public function payWithEscrow($id)
    {
        try {
            $order = Order::with('escrowAccount')->findOrFail($id);

            // Ch·ªâ ng∆∞·ªùi mua m·ªõi ƒë∆∞·ª£c thanh to√°n
            if (auth()->id() !== $order->buyer_id) {
                return response()->json(['message' => 'B·∫°n kh√¥ng c√≥ quy·ªÅn thanh to√°n ƒë∆°n h√†ng n√†y.'], 403);
            }

            //  N·∫øu ƒë∆°n kh√¥ng ph·∫£i pending th√¨ kh√¥ng cho thanh to√°n l·∫°i
            if ($order->status !== 'pending') {
                return response()->json(['message' => 'ƒê∆°n h√†ng n√†y kh√¥ng th·ªÉ thanh to√°n.'], 400);
            }

            // N·∫øu ch∆∞a c√≥ escrow th√¨ t·∫°o
            $escrow = $order->escrowAccount;
            if (!$escrow) {
                $escrow = $order->escrowAccount()->create([
                    'order_id'  => $order->id,
                    'buyer_id'  => $order->buyer_id,
                    'seller_id' => $order->seller_id,
                    'amount'    => $order->total_amount,
                    'currency'  => $order->currency ?? 'VND',
                    'status'    => 'holding',
                    'held_at'   => now(),
                ]);
            }

            //  C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n
            $order->update([
                'status' => 'paid',
                'paid_at' => now(),
            ]);

            return response()->json([
                'success' => true,
                'message' => 'üí≥ Thanh to√°n th√†nh c√¥ng! Ti·ªÅn ƒëang ƒë∆∞·ª£c gi·ªØ trong t√†i kho·∫£n trung gian.',
                'order'   => $order,
                'escrow'  => $escrow,
            ]);
        } catch (\Exception $e) {
            \Log::error('L·ªói thanh to√°n escrow: ' . $e->getMessage(), [
                'order_id' => $id,
                'user_id' => auth()->id(),
                'trace' => $e->getTraceAsString(),
            ]);

            return response()->json([
                'success' => false,
                'message' => 'C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω thanh to√°n.',
            ], 500);
        }
    }
}

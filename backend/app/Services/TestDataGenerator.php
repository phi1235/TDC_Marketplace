<?php

namespace App\Services;

use App\Models\Category;
use App\Models\User;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Log;

class TestDataGenerator
{
    protected $vietnameseProducts = [
        's√°ch gi√°o khoa', 's√°ch tham kh·∫£o', 's√°ch b√†i t·∫≠p', 's√°ch n√¢ng cao',
        'm√°y t√≠nh b·∫£ng', 'laptop c≈©', 'm√°y t√≠nh ƒë·ªÉ b√†n', 'chu·ªôt m√°y t√≠nh',
        'b√†n h·ªçc', 'gh·∫ø h·ªçc', 't·ªß s√°ch', 'ƒë√®n h·ªçc',
        'xe ƒë·∫°p', 'xe m√°y', 'm≈© b·∫£o hi·ªÉm', '√°o kho√°c',
        'gi√†y th·ªÉ thao', 'balo h·ªçc sinh', 'c·∫∑p s√°ch', 'b√∫t vi·∫øt',
        'v·ªü ghi ch√©p', 's·ªï tay', 'b√∫t ch√¨', 't·∫©y',
        'th∆∞·ªõc k·∫ª', 'compa', 'm√°y t√≠nh c·∫ßm tay', 'ƒëi·ªán tho·∫°i c≈©'
    ];

    protected $vietnameseDescriptions = [
        'T√¨nh tr·∫°ng t·ªët, s·ª≠ d·ª•ng c·∫©n th·∫≠n',
        'C√≤n m·ªõi, √≠t s·ª≠ d·ª•ng',
        'ƒê√£ qua s·ª≠ d·ª•ng nh∆∞ng c√≤n t·ªët',
        'C·∫ßn s·ª≠a ch·ªØa nh·ªè',
        'Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng',
        'Ph√π h·ª£p cho sinh vi√™n',
        'Gi√° c·∫£ h·ª£p l√Ω',
        'Giao h√†ng t·∫≠n n∆°i',
        'C√≥ th·ªÉ th∆∞∆°ng l∆∞·ª£ng gi√°',
        'Li√™n h·ªá ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt'
    ];

    protected $conditions = ['A', 'B', 'C', 'D'];
    protected $statuses = ['active', 'pending', 'sold'];

    /**
     * üè≠ Generate synthetic listings data
     */
    public function generateListings(int $count = 1000): array
    {
        $listings = [];
        $users = User::pluck('id')->toArray();
        $categories = Category::pluck('id')->toArray();

        if (empty($users)) {
            throw new \Exception('No users found. Please seed users first.');
        }

        if (empty($categories)) {
            throw new \Exception('No categories found. Please seed categories first.');
        }

        for ($i = 0; $i < $count; $i++) {
            $listings[] = [
                'id' => 'test_' . ($i + 1),
                'title' => $this->generateVietnameseTitle(),
                'description' => $this->generateVietnameseDescription(),
                'price' => $this->generatePrice(),
                'condition_grade' => $this->conditions[array_rand($this->conditions)],
                'status' => $this->statuses[array_rand($this->statuses)],
                'category_id' => $categories[array_rand($categories)],
                'seller_id' => $users[array_rand($users)],
                'created_at' => $this->generateRandomDate(),
                'updated_at' => $this->generateRandomDate(),
            ];
        }

        return $listings;
    }

    /**
     * üìö Generate Vietnamese product titles
     */
    private function generateVietnameseTitle(): string
    {
        $baseProduct = $this->vietnameseProducts[array_rand($this->vietnameseProducts)];
        
        $modifiers = [
            'c≈©', 'ƒë√£ qua s·ª≠ d·ª•ng', 't√¨nh tr·∫°ng t·ªët', 'c√≤n m·ªõi',
            'gi√° r·∫ª', 'c·∫ßn b√°n g·∫•p', 'ch·∫•t l∆∞·ª£ng cao', 'ph√π h·ª£p',
            'cho sinh vi√™n', 'ti·∫øt ki·ªám', 'th∆∞∆°ng l∆∞·ª£ng', 'giao h√†ng'
        ];

        $modifier = $modifiers[array_rand($modifiers)];
        
        return ucfirst($baseProduct) . ' ' . $modifier;
    }

    /**
     * üìù Generate Vietnamese descriptions
     */
    private function generateVietnameseDescription(): string
    {
        $descriptions = [];
        $numSentences = rand(2, 4);
        
        for ($i = 0; $i < $numSentences; $i++) {
            $descriptions[] = $this->vietnameseDescriptions[array_rand($this->vietnameseDescriptions)];
        }
        
        return implode('. ', $descriptions) . '.';
    }

    /**
     * üí∞ Generate realistic prices
     */
    private function generatePrice(): float
    {
        // Generate prices between 10,000 and 5,000,000 VND
        $minPrice = 10000;
        $maxPrice = 5000000;
        
        return round(rand($minPrice, $maxPrice) / 1000) * 1000; // Round to nearest 1000
    }

    /**
     * üìÖ Generate random dates within last 6 months
     */
    private function generateRandomDate(): string
    {
        $start = now()->subMonths(6);
        $end = now();
        
        $randomTimestamp = rand($start->timestamp, $end->timestamp);
        
        return date('Y-m-d H:i:s', $randomTimestamp);
    }

    /**
     * üß™ Generate test queries for Vietnamese language testing
     */
    public function generateVietnameseTestQueries(): array
    {
        return [
            's√°ch gi√°o khoa' => 'Vietnamese with diacritics',
            'sach giao khoa' => 'Vietnamese without diacritics',
            's√°ch to√°n l·ªõp 10' => 'Complex Vietnamese phrase',
            'sach toan lop 10' => 'Complex Vietnamese without diacritics',
            'm√°y t√≠nh b·∫£ng' => 'Vietnamese with special characters',
            'may tinh bang' => 'Vietnamese without special characters',
            'laptop c≈© gi√° r·∫ª' => 'Multi-word Vietnamese query',
            'laptop cu gia re' => 'Multi-word without diacritics',
            'ƒëi·ªán tho·∫°i' => 'Vietnamese with special characters',
            'dien thoai' => 'Vietnamese without special characters',
            'b√†n h·ªçc sinh vi√™n' => 'Long Vietnamese phrase',
            'ban hoc sinh vien' => 'Long phrase without diacritics'
        ];
    }

    /**
     * üîç Generate test queries for performance testing
     */
    public function generatePerformanceTestQueries(): array
    {
        return [
            's√°ch' => 'Single word',
            'laptop' => 'Single word',
            'm√°y t√≠nh' => 'Two words with diacritics',
            's√°ch gi√°o khoa' => 'Three words',
            'laptop c≈© gi√° r·∫ª' => 'Four words',
            's√°ch to√°n l·ªõp 10 c≈©' => 'Five words',
            'm√°y t√≠nh b·∫£ng c≈© t√¨nh tr·∫°ng t·ªët' => 'Six words',
            'laptop dell c≈© gi√° r·∫ª cho sinh vi√™n' => 'Seven words',
            's√°ch gi√°o khoa to√°n l·ªõp 10 c≈© t√¨nh tr·∫°ng t·ªët' => 'Eight words'
        ];
    }

    /**
     * üìä Generate test data for different dataset sizes
     */
    public function generateTestDatasets(): array
    {
        $datasets = [];
        
        // Small dataset (100 records)
        $datasets['small'] = [
            'count' => 100,
            'description' => 'Small dataset for basic testing',
            'listings' => $this->generateListings(100)
        ];
        
        // Medium dataset (1,000 records)
        $datasets['medium'] = [
            'count' => 1000,
            'description' => 'Medium dataset for moderate testing',
            'listings' => $this->generateListings(1000)
        ];
        
        // Large dataset (10,000 records)
        $datasets['large'] = [
            'count' => 10000,
            'description' => 'Large dataset for stress testing',
            'listings' => $this->generateListings(10000)
        ];
        
        return $datasets;
    }

    /**
     * üéØ Generate specific test scenarios
     */
    public function generateTestScenarios(): array
    {
        return [
            'simple_search' => [
                'name' => 'Simple Search',
                'description' => 'Single keyword searches',
                'queries' => ['s√°ch', 'laptop', 'm√°y t√≠nh', 'b√†n h·ªçc']
            ],
            'complex_search' => [
                'name' => 'Complex Search',
                'description' => 'Multi-keyword searches with filters',
                'queries' => [
                    's√°ch gi√°o khoa to√°n',
                    'laptop c≈© gi√° r·∫ª',
                    'm√°y t√≠nh b·∫£ng t√¨nh tr·∫°ng t·ªët'
                ]
            ],
            'vietnamese_search' => [
                'name' => 'Vietnamese Language Search',
                'description' => 'Vietnamese text with and without diacritics',
                'queries' => $this->generateVietnameseTestQueries()
            ],
            'performance_search' => [
                'name' => 'Performance Search',
                'description' => 'Various query lengths for performance testing',
                'queries' => $this->generatePerformanceTestQueries()
            ],
            'fuzzy_search' => [
                'name' => 'Fuzzy Search',
                'description' => 'Queries with typos and variations',
                'queries' => [
                    'sach' => 's√°ch',
                    'may tinh' => 'm√°y t√≠nh',
                    'lapto' => 'laptop',
                    'ban hoc' => 'b√†n h·ªçc'
                ]
            ]
        ];
    }

    /**
     * üìà Generate load test scenarios
     */
    public function generateLoadTestScenarios(): array
    {
        return [
            'light_load' => [
                'concurrent_users' => 10,
                'queries_per_user' => 5,
                'duration_minutes' => 5,
                'description' => 'Light load testing'
            ],
            'medium_load' => [
                'concurrent_users' => 50,
                'queries_per_user' => 10,
                'duration_minutes' => 10,
                'description' => 'Medium load testing'
            ],
            'heavy_load' => [
                'concurrent_users' => 100,
                'queries_per_user' => 20,
                'duration_minutes' => 15,
                'description' => 'Heavy load testing'
            ],
            'stress_load' => [
                'concurrent_users' => 200,
                'queries_per_user' => 30,
                'duration_minutes' => 20,
                'description' => 'Stress testing'
            ]
        ];
    }

    /**
     * üóÇÔ∏è Generate categories for testing
     */
    public function generateTestCategories(): array
    {
        return [
            ['name' => 'S√°ch gi√°o khoa', 'slug' => 'sach-giao-khoa'],
            ['name' => 'S√°ch tham kh·∫£o', 'slug' => 'sach-tham-khao'],
            ['name' => 'M√°y t√≠nh', 'slug' => 'may-tinh'],
            ['name' => 'ƒêi·ªán tho·∫°i', 'slug' => 'dien-thoai'],
            ['name' => 'B√†n gh·∫ø', 'slug' => 'ban-ghe'],
            ['name' => 'Xe c·ªô', 'slug' => 'xe-co'],
            ['name' => 'Qu·∫ßn √°o', 'slug' => 'quan-ao'],
            ['name' => 'ƒê·ªì d√πng h·ªçc t·∫≠p', 'slug' => 'do-dung-hoc-tap']
        ];
    }

    /**
     * üë• Generate test users
     */
    public function generateTestUsers(int $count = 50): array
    {
        $users = [];
        
        for ($i = 0; $i < $count; $i++) {
            $users[] = [
                'name' => 'Test User ' . ($i + 1),
                'email' => 'testuser' . ($i + 1) . '@tdc.edu.vn',
                'password' => bcrypt('password123'),
                'role' => 'user',
                'created_at' => now(),
                'updated_at' => now()
            ];
        }
        
        return $users;
    }

    /**
     * üìä Get statistics about generated data
     */
    public function getDataStatistics(array $listings): array
    {
        $prices = array_column($listings, 'price');
        $conditions = array_column($listings, 'condition_grade');
        $statuses = array_column($listings, 'status');
        
        return [
            'total_listings' => count($listings),
            'price_range' => [
                'min' => min($prices),
                'max' => max($prices),
                'avg' => round(array_sum($prices) / count($prices), 2)
            ],
            'condition_distribution' => array_count_values($conditions),
            'status_distribution' => array_count_values($statuses),
            'date_range' => [
                'earliest' => min(array_column($listings, 'created_at')),
                'latest' => max(array_column($listings, 'created_at'))
            ]
        ];
    }
}

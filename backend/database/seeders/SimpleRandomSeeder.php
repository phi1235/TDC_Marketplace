<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Listing;
use App\Models\User;
use App\Models\Category;
use App\Models\ListingImage;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\DB;

class SimpleRandomSeeder extends Seeder
{
    public function run()
    {
        $count = 1000; // Generate 1000 random listings
        
        echo "üöÄ Generating {$count} random listings...\n";
        
        // Create users if needed
        if (User::where('role', 'user')->count() < 10) {
            echo "üë• Creating sample users...\n";
            for ($i = 0; $i < 20; $i++) {
                User::create([
                    'name' => 'User ' . ($i + 1),
                    'email' => 'user' . ($i + 1) . '@tdc.edu.vn',
                    'phone' => '012345678' . str_pad($i, 2, '0', STR_PAD_LEFT),
                    'password' => Hash::make('password123'),
                    'role' => 'user',
                    'is_active' => true,
                    'email_verified_at' => now(),
                ]);
            }
        }
        
        // Create categories if needed
        if (Category::count() < 5) {
            echo "üìÇ Creating sample categories...\n";
            $categories = [
                ['name' => 'S√°ch gi√°o khoa', 'slug' => 'sach-giao-khoa', 'icon' => 'book'],
                ['name' => 'ƒêi·ªán t·ª≠', 'slug' => 'dien-tu', 'icon' => 'laptop'],
                ['name' => 'Qu·∫ßn √°o', 'slug' => 'quan-ao', 'icon' => 'shirt'],
                ['name' => 'ƒê·ªì ch∆°i', 'slug' => 'do-choi', 'icon' => 'game'],
                ['name' => 'Nh·∫°c c·ª•', 'slug' => 'nhac-cu', 'icon' => 'music'],
                ['name' => 'Th·ªÉ thao', 'slug' => 'the-thao', 'icon' => 'sport'],
                ['name' => 'M·ªπ ph·∫©m', 'slug' => 'my-pham', 'icon' => 'beauty'],
                ['name' => 'Th·ª±c ph·∫©m', 'slug' => 'thuc-pham', 'icon' => 'food'],
                ['name' => 'N·ªôi th·∫•t', 'slug' => 'noi-that', 'icon' => 'furniture'],
                ['name' => 'Xe c·ªô', 'slug' => 'xe-co', 'icon' => 'car'],
            ];
            
            foreach ($categories as $category) {
                Category::create([
                    'name' => $category['name'],
                    'slug' => $category['slug'],
                    'description' => 'Danh m·ª•c ' . $category['name'],
                    'icon' => $category['icon'],
                    'is_active' => true,
                ]);
            }
        }
        
        $users = User::where('role', 'user')->get();
        $categories = Category::all();
        
        if ($users->isEmpty() || $categories->isEmpty()) {
            echo "‚ùå No users or categories found!\n";
            return;
        }
        
        // Generate random listings using raw SQL for better performance
        $this->generateListingsWithSQL($count, $users, $categories);
        
        echo "‚úÖ Successfully generated {$count} random listings!\n";
    }
    
    private function generateListingsWithSQL($count, $users, $categories)
    {
        $userIds = $users->pluck('id')->toArray();
        $categoryIds = $categories->pluck('id')->toArray();
        
        $prefixes = ['B√°n', 'C·∫ßn b√°n', 'Thanh l√Ω', 'B√°n g·∫•p', 'B√°n r·∫ª', 'T·∫∑ng k√®m'];
        $items = ['Laptop', 'ƒêi·ªán tho·∫°i', 'S√°ch', 'Qu·∫ßn √°o', 'Gi√†y d√©p', 'ƒê·ªì ch∆°i', 'Nh·∫°c c·ª•', 'Th·ªÉ thao', 'M·ªπ ph·∫©m', 'Th·ª±c ph·∫©m'];
        $adjectives = ['c≈©', 'm·ªõi', 'ƒë·∫πp', 't·ªët', 'r·∫ª', 'cao c·∫•p', 'hi·∫øm', 'ƒë·ªôc ƒë√°o'];
        $conditions = ['new', 'like_new', 'good', 'fair'];
        $statuses = ['approved', 'pending', 'rejected'];
        $locations = ['H√† N·ªôi', 'TP.HCM', 'ƒê√† N·∫µng', 'C·∫ßn Th∆°', 'H·∫£i Ph√≤ng', 'Nha Trang', 'Hu·∫ø', 'V≈©ng T√†u'];
        
        $descriptions = [
            'S·∫£n ph·∫©m ch·∫•t l∆∞·ª£ng t·ªët, c√≤n m·ªõi 90%. Ph√π h·ª£p cho sinh vi√™n, ng∆∞·ªùi ƒëi l√†m.',
            'ƒê√£ s·ª≠ d·ª•ng √≠t, t√¨nh tr·∫°ng r·∫•t t·ªët. B√°n v√¨ kh√¥ng c√≤n nhu c·∫ßu s·ª≠ d·ª•ng.',
            'S·∫£n ph·∫©m ch√≠nh h√£ng, c√≥ h√≥a ƒë∆°n mua h√†ng. B·∫£o h√†nh c√≤n l·∫°i 6 th√°ng.',
            'Mua v·ªÅ d√πng th·ª≠, kh√¥ng ph√π h·ª£p n√™n b√°n l·∫°i. Gi√° r·∫ª h∆°n th·ªã tr∆∞·ªùng.',
            'ƒê·ªì c≈© nh∆∞ng c√≤n s·ª≠ d·ª•ng t·ªët. Ph√π h·ª£p cho ng∆∞·ªùi c√≥ thu nh·∫≠p th·∫•p.',
            'S·∫£n ph·∫©m cao c·∫•p, √≠t s·ª≠ d·ª•ng. B√°n v√¨ chuy·ªÉn nh√†, kh√¥ng mang theo ƒë∆∞·ª£c.',
            'H√†ng thanh l√Ω, gi√° r·∫ª. C√≤n s·ª≠ d·ª•ng ƒë∆∞·ª£c, ph√π h·ª£p cho sinh vi√™n.',
            'ƒê·ªì c≈© nh∆∞ng ch·∫•t l∆∞·ª£ng t·ªët. B√°n v√¨ kh√¥ng c√≤n nhu c·∫ßu s·ª≠ d·ª•ng.',
            'S·∫£n ph·∫©m m·ªõi 100%, ch∆∞a s·ª≠ d·ª•ng. C√≥ h√≥a ƒë∆°n mua h√†ng ƒë·∫ßy ƒë·ªß.',
            'ƒê·ªì c≈© nh∆∞ng c√≤n s·ª≠ d·ª•ng t·ªët. Gi√° r·∫ª, ph√π h·ª£p cho ng∆∞·ªùi c√≥ thu nh·∫≠p th·∫•p.'
        ];
        
        // Generate listings in batches
        $batchSize = 100;
        $batches = ceil($count / $batchSize);
        
        for ($batch = 0; $batch < $batches; $batch++) {
            $currentBatchSize = min($batchSize, $count - ($batch * $batchSize));
            $values = [];
            
            for ($i = 0; $i < $currentBatchSize; $i++) {
                $prefix = $prefixes[array_rand($prefixes)];
                $item = $items[array_rand($items)];
                $adjective = $adjectives[array_rand($adjectives)];
                $title = $prefix . ' ' . $item . ' ' . $adjective;
                
                $description = $descriptions[array_rand($descriptions)];
                $condition = $conditions[array_rand($conditions)];
                $status = $statuses[array_rand($statuses)];
                $location = $locations[array_rand($locations)];
                $price = rand(10000, 50000000);
                $viewsCount = rand(0, 1000);
                $sellerId = $userIds[array_rand($userIds)];
                $categoryId = $categoryIds[array_rand($categoryIds)];
                $createdAt = date('Y-m-d H:i:s', rand(strtotime('-6 months'), time()));
                
                $values[] = "({$sellerId}, {$categoryId}, '{$title}', '{$description}', '{$condition}', {$price}, '{$status}', '{$location}', {$viewsCount}, '{$createdAt}', NOW())";
            }
            
            if (!empty($values)) {
                $sql = "INSERT INTO listings (seller_id, category_id, title, description, condition, price, status, location, views_count, created_at, updated_at) VALUES " . implode(',', $values);
                DB::statement($sql);
                
                // Get the inserted listing IDs and create images
                $listingIds = DB::select("SELECT id FROM listings ORDER BY id DESC LIMIT {$currentBatchSize}");
                
                foreach ($listingIds as $listing) {
                    $imageCount = rand(1, 3);
                    for ($j = 0; $j < $imageCount; $j++) {
                        $imagePath = 'listings/' . date('Y/m/d') . '/' . uniqid() . '.jpg';
                        $originalName = 'sample_' . uniqid() . '.jpg';
                        $fileSize = rand(50000, 500000);
                        $width = rand(300, 800);
                        $height = rand(300, 600);
                        $isPrimary = $j === 0;
                        
                        DB::table('listing_images')->insert([
                            'listing_id' => $listing->id,
                            'image_path' => $imagePath,
                            'original_name' => $originalName,
                            'file_size' => $fileSize,
                            'mime_type' => 'image/jpeg',
                            'width' => $width,
                            'height' => $height,
                            'is_primary' => $isPrimary,
                            'sort_order' => $j,
                            'created_at' => $createdAt,
                            'updated_at' => now(),
                        ]);
                    }
                }
            }
            
            echo "‚úÖ Generated batch " . ($batch + 1) . "/{$batches}\n";
        }
    }
}
